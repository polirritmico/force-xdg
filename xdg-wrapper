#!/usr/bin/env bash

#=== SH_SCRIPT  ================================================================
#         NAME:   XDG-Wrapper
#  DESCRIPTION:   A simple BASH script to simulate XDG paths and clean HOME.
#         DATE:   2022/07/07
#         TODO:   Add warnning for sys apps like: ssh, bash, dbus, etc.
#===============================================================================

# e - script stops on error (return !=0)
# u - error if undefined variable
# o pipefail - script fails if one of piped command fails
# x - output each line (debug)
set -euo pipefail


#-----------------------------------------------------------------------
#  Global settings
#-----------------------------------------------------------------------
SCRIPT_VERSION="0.1"
SHORT_DESCRIPTION="A simple BASH script to simulate XDG paths and clean HOME."
SCRIPT_NAME="XDG-Wrapper"

XDG_WRAPPER_FOLDER="$XDG_DATA_HOME"/XDG-Wrapper
XDG_WRAPPER_CACHE="$XDG_CACHE_HOME"/XDG-Wrapper

DEPENDENCIES=( "bash" )

#----------------------------------------
# Terminal output font styles and colors
GREEN="\033[0;32m"
ORANGE="\033[0;33m"
NS="\033[0m" # No color
BLD="\e[1m" # Bold text style
ITL="\e[3m"   # Italic text style
DF="\e[0m"   # Default style

F_OK="${GREEN}${BLD}OK${NS}"
F_ERR="\e[0;31m"
F_CMD="\033[1;36m"
F_ARG="\033[1;32m"
F_OPT="\033[1;32m"

# Get the real script filename even through a symbolic link
SCRIPT_RUN="$(basename "$(test -L "$0" && readlink "$0" || echo "$0")")"


#-----------------------------------------------------------------------
# Check dependencies
#-----------------------------------------------------------------------
missing_deps=0
for dependency in "${DEPENDENCIES[@]}"; do
    if ! command -v $dependency > /dev/null 2>&1; then
        echo -e "$RED$SCRIPT_RUN: Could't find '$dependency' on the system."\
                                 "Check if is installed.$NS"
        ((++missing_deps))
    fi
done
if [[ $missing_deps -gt 0 ]]; then
    exit 1
fi



#===  FUNCTION  ================================================================
#         NAME:   Version
#  DESCRIPTION:   Show script name, script version and short description.
#===============================================================================
function version()
{
    echo -e "$BLD$SCRIPT_NAME v$SCRIPT_VERSION$NS"
    echo -e "$ITL$SHORT_DESCRIPTION$NS\n"

}  # ------------  end of function version  ------------



#===  FUNCTION  ================================================================
#         NAME:   Help
#  DESCRIPTION:   Show the script usage and documentation help.
#===============================================================================
function help()
{
    echo -e "${BLD}Usage: $F_CMD$SCRIPT_RUN $F_ARG[OPTION]... [PROGRAM]$NS
       $F_CMD$SCRIPT_RUN $F_ARG[OPTION]... [PROGRAM] [PROGRAM ARGS]$NS

Move hidden polluting files from [HOME] to [XDG_DATA_HOME]/XDG-Wrapper/ folder.
When [PROGRAM] is run for the first time is STRONGLY RECOMMENDED to close it
immediately to get a clean file list. The script compare the state of [HOME]
before and after the first execution to make a folders and files list based on
the changes.

${BLD}Options:
$F_OPT  -f|folder        ${NS}Manually setup destination folder
                   ($ITL"$XDG_WRAPPER_FOLDER"$NS by default)
$F_OPT  -h|help          ${NS}Display this help message.
$F_OPT  -v|version       ${NS}Display the version of $SCRIPT_NAME and exit."

}  # ------------  end of function help  ------------



#-------------------------------------------------------------------------------
#  Default variables
#-------------------------------------------------------------------------------

custom_folder=""

apps_db=()
apps_db_file="$XDG_WRAPPER_FOLDER"/db

app_name=""
app_dirs_and_files=()
home_before=""
home_after=""


#-------------------------------------------------------------------------------
#  Handle command line arguments
#-------------------------------------------------------------------------------
while getopts ":hv:f" opt
    do
        case $opt in
            h|help)
                version
                help
                exit 0
                ;;
            v|version)
                version
                exit 0
                ;;
            f|folder)
                custom_folder=$OPTARG
                echo -e "$SCRIPT_NAME: Not implemented.\n"
                exit 1
                ;;
            :)
                echo -e "$SCRIPT_NAME: Invalid option: '-$OPTARG' requires an argument\n"
                help
                exit 1
                ;;
            *)
                echo -e "$SCRIPT_NAME: Invalid option: '-$OPTARG'\n"
                help
                exit 1
                ;;
    esac
done
shift $(($OPTIND-1))

#----------------------------------------
# Check for program arg
# TODO: get rid of app_name path (e.g. "~/path/to/binary/appname" â†’ "appname")
if [[ $# -eq 1 ]]; then
    app_name=$1
else
    echo -e "${F_ERR}ERROR: Check usage.$NS\n"
    help
    exit 1
fi



#===  FUNCTION  ================================================================
#         NAME:   Get dir and files from db
#  DESCRIPTION:   Read the db file and get dirs and files used by appname.
#===============================================================================
function get_dir_and_files_from_db()
{
    echo "Get dir and files from db..."

    if [[ ! -e $apps_db_file ]]; then
        echo "no db file found"
        return 0
    fi

    IFS=$'\n'
    apps_db=($(cat "$apps_db_file"))

    for (( i=0; i<${#apps_db[@]}; i++ )); do
        IFS=$';'; line=(${apps_db[$i]}) # Split line by ";" into an array
        if [[ ${line[0]} != $app_name ]]; then
            continue
        fi

        # Get the array without first entry (app_name)
        app_dirs_and_files=("${line[@]:1}")
    done

    unset IFS
}  # ------------  end of function get_dir_and_files_from_db  ------------



#===  FUNCTION  ================================================================
#         NAME:   Save app info into db
#  DESCRIPTION:   Save the appname, dirs and folders into the database.
#===============================================================================
function save_app_info_into_db()
{
    data="$app_name"
    for (( i=0; i<${#app_dirs_and_files[@]}; i++ )); do
        data="${data};${app_dirs_and_files[i]}"
    done
    data="${data};"
    # Remove $HOME path and dot
    #data=$(echo $data | sed "s|$HOME/\.||g")

    echo $data >> $apps_db_file

}  # ------------  end of function save_app_info_into_db  ------------



#===  FUNCTION  ================================================================
#         NAME:   Run app
#  DESCRIPTION:   Check if the app_name exists, then run it.
#===============================================================================
function run_app()
{
    if ! command -v $app_name > /dev/null 2>&1; then
        echo "Error: $app_name seems not valid"
        exit 1
    fi

    eval " $app_name > /dev/null 2>&1"
    #eval " $app_name"

}  # ------------  end of function run_app  ------------



#===  FUNCTION  ================================================================
#         NAME:   Get diff dir and files
#  DESCRIPTION:   Compare the before and after list and get the dirs and files
#                 created by the app.
#===============================================================================
function get_diff_dir_and_files()
{
    #echo $(diff --changed-group-format='%>' --unchanged-group-format='' <(echo -e "${home_before}") <(echo -e "${home_after}"))
    echo $(diff --changed-group-format='%>' --unchanged-group-format='' <(echo -e "${home_before}") <(echo -e "${home_after}") | sed "s|$HOME/\.||g")

}  # ------------  end of function get_diff_dir_and_files  ------------



#===  FUNCTION  ================================================================
#         NAME:   Move dir and files to home
#  DESCRIPTION:   Move dirs and files in the db.
#===============================================================================
function mv_dir_and_files_to_home()
{
    for (( i=0; i<${#app_dirs_and_files[@]}; i++ )); do
        file=${app_dirs_and_files[i]}

        mv "${XDG_WRAPPER_FOLDER}/${app_name}/${file}" "${HOME}/.${file}"
    done

}  # ------------  end of function mv_dir_and_files_to_home  ------------



#===  FUNCTION  ================================================================
#         NAME:   Mv dir and files from home
#  DESCRIPTION:   Move dirs and files in the db from $HOME to XDG wrapper dir.
#===============================================================================
function mv_dir_and_files_from_home()
{
    # Create dir if doesn't exists
    if [[ ! -d "${XDG_WRAPPER_FOLDER}/${app_name}" ]]; then
        mkdir "${XDG_WRAPPER_FOLDER}/${app_name}"
    fi

    # Move the dir and files
    for (( i=0; i<${#app_dirs_and_files[@]}; i++ )); do
        file=${app_dirs_and_files[i]}
        
        mv "$HOME/.$file" "${XDG_WRAPPER_FOLDER}/$app_name/$file"
    done

}  # ------------  end of function mv_dir_and_files_from_home  ------------



#===============================================================================
# BEGINNING OF SCRIPT WORK
#===============================================================================

#-------------------------------------------------------------------------------
# Check first run and make paths
#-------------------------------------------------------------------------------
if [[ ! -d "$XDG_WRAPPER_FOLDER" ]]; then
    mkdir "$XDG_WRAPPER_FOLDER"
fi

get_dir_and_files_from_db

if [[ ${#app_dirs_and_files[@]} -eq 0 ]]; then
    # App first run
    home_before=$(find $HOME -mindepth 1 -maxdepth 1)

    echo "Running ${app_name}..."
    run_app
    echo "Done"

    home_after=$(find $HOME -mindepth 1 -maxdepth 1)

    echo "Get diff files..."
    app_dirs_and_files=$(get_diff_dir_and_files)
    echo -e "Generated dir and files: ${app_dirs_and_files}"

    save_app_info_into_db
else
    mv_dir_and_files_to_home
    run_app
fi

mv_dir_and_files_from_home
echo "Done"

