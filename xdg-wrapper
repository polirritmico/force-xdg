#!/usr/bin/env bash

#=== SH_SCRIPT  ================================================================
#         NAME:   XDG-Wrapper
#  DESCRIPTION:   A simple BASH script to simulate XDG paths and clean HOME.
#         DATE:   2022/07/07
#===============================================================================

# e - script stops on error (return !=0)
# u - error if undefined variable
# o pipefail - script fails if one of piped command fails
# x - output each line (debug)
set -euo pipefail


#-----------------------------------------------------------------------
#  Global settings
#-----------------------------------------------------------------------
SCRIPT_VERSION="0.1"
SHORT_DESCRIPTION="A simple BASH script to simulate XDG paths and clean HOME."
SCRIPT_NAME="XDG-Wrapper"
# Get the real script filename even through a symbolic link
SCRIPT_RUN="$(basename "$(test -L "$0" && readlink "$0" || echo "$0")")"

XDG_WRAPPER_FOLDER="$XDG_DATA_HOME"/XDG-Wrapper
DEPENDENCIES=( "getopts" "sed" "grep" "awk" )

#----------------------------------------
# Terminal output font styles and colors
GREEN="\033[0;32m"
ORANGE="\033[0;33m"
NS="\033[0m" # No color
BLD="\e[1m" # Bold text style
ITL="\e[3m"   # Italic text style
DF="\e[0m"   # Default style

F_OK="${GREEN}${BLD}OK${NS}"
F_APP="${ORANGE}"
F_ERR="\e[0;31m"
F_CMD="\033[1;36m"
F_ARG="\033[1;32m"
F_OPT="\033[1;32m"
F_SCR="\033[1;36m\e[1m${SCRIPT_RUN}:${NS} "


#-----------------------------------------------------------------------
# Check dependencies
#-----------------------------------------------------------------------
missing_deps=0
for dependency in "${DEPENDENCIES[@]}"; do
    if ! command -v $dependency > /dev/null 2>&1; then
        echo -e "$RED$SCRIPT_RUN: Could't find '$dependency' on the system."\
                                 "Check if is installed.$NS"
        ((++missing_deps))
    fi
done
if [[ $missing_deps -gt 0 ]]; then
    exit 1
fi



#===  FUNCTION  ================================================================
#         NAME:   Version
#  DESCRIPTION:   Show script name, script version and short description.
#===============================================================================
function version()
{
    echo -e "$BLD$SCRIPT_NAME v$SCRIPT_VERSION$NS"
    echo -e "$ITL$SHORT_DESCRIPTION$NS\n"

}  # ------------  end of function version  ------------



#===  FUNCTION  ================================================================
#         NAME:   Help
#  DESCRIPTION:   Show the script usage and documentation help.
#===============================================================================
function help()
{
    echo -e "${BLD}Usage: $F_CMD$SCRIPT_RUN $F_ARG[OPTION]... [PROGRAM]$NS
       $F_CMD$SCRIPT_RUN $F_ARG[OPTION]... [PROGRAM] [PROGRAM ARGS]$NS

Move hidden polluting files from [HOME] to [XDG_DATA_HOME]/XDG-Wrapper/ folder.
When [PROGRAM] is run for the first time is STRONGLY RECOMMENDED to close it
immediately to get a clean file list. The script compare the state of [HOME]
before and after the first execution to make a folders and files list based on
the changes.

${BLD}Options:
$F_OPT  -c|custom        ${NS}Change the program identifier to a custom one. Usefull when
                   launching programs from scripts or when the same program
                   could be initialized from differents symlinks or paths.
$F_OPT  -f|folder        ${NS}Manually setup destination folder
                   ($ITL"$XDG_WRAPPER_FOLDER"$NS by default)
$F_OPT  -h|help          ${NS}Display this help message.
$F_OPT  -v|version       ${NS}Display the version of $SCRIPT_NAME and exit."

}  # ------------  end of function help  ------------



#-------------------------------------------------------------------------------
#  Default variables
#-------------------------------------------------------------------------------

custom_folder=""
custom_id=""

apps_db=()
apps_db_file="$XDG_WRAPPER_FOLDER"/db

app_name=""
app_name_clean=""
app_args=""
app_dirs_and_files=()
home_before=""
home_after=""


#-------------------------------------------------------------------------------
#  Handle command line arguments
#-------------------------------------------------------------------------------
while getopts ":hv:c:f" opt
    do
        case $opt in
            h|help)
                version
                help
                exit 0
                ;;
            v|version)
                version
                exit 0
                ;;
            c|custom)
                custom_id=$OPTARG
                ;;
            f|folder)
                custom_folder=$OPTARG
                ;;
            :)
                echo -e "$SCRIPT_NAME: Invalid option: '-$OPTARG' requires an argument\n"
                help
                exit 1
                ;;
            *)
                echo -e "$SCRIPT_NAME: Invalid option: '-$OPTARG'\n"
                help
                exit 1
                ;;
    esac
done
shift $(($OPTIND-1))

#----------------------------------------
# Check args, prepare and update variables,
# app info, and user input

if [[ $# -eq 0 ]]; then
    echo -e "${F_ERR}$SCRIPT_RUN: Error: Missing arguments. Check '${SCRIPT_RUN} -help'.$NS"
    exit 1
fi

app_name_raw=$1
if [[ -z $custom_id ]]; then
    app_name="${app_name_raw##*/}"
else
    app_name="$custom_id"
fi
app_args="${@:2}" # get all args after first

if [[ -n ${custom_folder} ]]; then
    XDG_WRAPPER_FOLDER="${custom_folder}"
fi

# Check if passed app exist on the system
if ! command -v ${app_name_raw} > /dev/null 2>&1; then
    echo -e "$F_ERR$SCRIPT_RUN: ERROR: Could't find '$app_name_raw'" \
            " on the system.$NS"
    exit 1
fi

# Output formating helper Format appname
F_APP="${F_APP}${app_name}$NS$ITL"


#===  FUNCTION  ================================================================
#         NAME:   Get dir and files from db
#  DESCRIPTION:   Read the db file and get dirs and files used by appname.
#===============================================================================
function get_dir_and_files_from_db()
{
    echo -en "${F_SCR}${ITL}Retrieving info of '${F_APP}' in the db...$NS"

    if [[ ! -e $apps_db_file ]]; then
        echo -e "\n$SCRIPT_RUN: ${ORANGE}${ITL}No db file found.$NS"
        return
    else
        echo -e " ${F_OK}"
    fi

    IFS=$'\n'
    apps_db=($(cat "$apps_db_file"))

    for (( i=0; i<${#apps_db[@]}; i++ )); do
        IFS=$';'; line=(${apps_db[$i]}) # Split line by ";" into an array
        if [[ ${line[0]} != $app_name ]]; then
            continue
        fi

        # Get the array without first entry (app_name)
        app_dirs_and_files=("${line[@]:1}")
    done

    unset IFS
}  # ------------  end of function get_dir_and_files_from_db  ------------



#===  FUNCTION  ================================================================
#         NAME:   Save app info into db
#  DESCRIPTION:   Save the appname, dirs and folders into the database.
#===============================================================================
function save_app_info_into_db()
{
    echo -e "${F_SCR}${ITL}Storing '${F_APP}' info in the database...$NS"
    data="$app_name"
    for (( i=0; i<${#app_dirs_and_files[@]}; i++ )); do
        data="${data};${app_dirs_and_files[i]}"
    done
    data="${data};"

    if [[ ! -f $apps_db_file ]]; then
        echo -en "${F_SCR}${ITL}Creating the database file... "
    else
        echo -en "${F_SCR}${ITL}Updating the database... "
    fi
    echo $data >> $apps_db_file
    echo -e "$F_OK"

}  # ------------  end of function save_app_info_into_db  ------------



#===  FUNCTION  ================================================================
#         NAME:   Run app
#  DESCRIPTION:   Check if the app_name exists, then run it.
#===============================================================================
function run_app()
{
    if [[ -z $app_args ]]; then
        app_command="${ORANGE}${app_name_raw}${NS}${ITL}"
    else
        app_command="${ORANGE}${app_name_raw} ${app_args}${NS}${ITL}"
    fi
    echo -e "${F_SCR}${ITL}Running '${app_command}'...$NS"
    echo -e "$GREEN===================================$NS"

    #eval " $app_name_raw $app_args > /dev/null 2>&1"
    eval " $app_name_raw $app_args"

    echo -e "\n$GREEN===================================$NS"
    echo -e "${F_SCR}${ITL}Closed '${F_APP}'$NS"

}  # ------------  end of function run_app  ------------



#===  FUNCTION  ================================================================
#         NAME:   Move dir and files to home
#  DESCRIPTION:   Move dirs and files in the db.
#===============================================================================
function mv_dir_and_files_to_home()
{
    echo -en "${F_SCR}${ITL}Moving '${F_APP}' folders to home..."
    for (( i=0; i<${#app_dirs_and_files[@]}; i++ )); do
        file=${app_dirs_and_files[i]}
        mv "${XDG_WRAPPER_FOLDER}/${app_name}/${file}" "${HOME}/.${file}"
    done
    echo -e " $F_OK"

}  # ------------  end of function mv_dir_and_files_to_home  ------------



#===  FUNCTION  ================================================================
#         NAME:   Mv dir and files from home
#  DESCRIPTION:   Move dirs and files in the db from $HOME to XDG wrapper dir.
#===============================================================================
function mv_dir_and_files_from_home()
{
    echo -en "${F_SCR}${ITL}Cleaning home...$NS"
    # Create dir if doesn't exists
    if [[ ! -d "${XDG_WRAPPER_FOLDER}/${app_name}" ]]; then
        echo -en "\n${F_SCR}${ITL}Creating ${F_APP} folder...$NS"
        mkdir "${XDG_WRAPPER_FOLDER}/${app_name}"
    fi

    # Move the dir and files
    for (( i=0; i<${#app_dirs_and_files[@]}; i++ )); do
        file=${app_dirs_and_files[i]}
        mv "$HOME/.$file" "${XDG_WRAPPER_FOLDER}/$app_name/$file"
    done
    echo -e " $F_OK"

}  # ------------  end of function mv_dir_and_files_from_home  ------------



#===  FUNCTION  ================================================================
#         NAME:   Get HOME state
#  DESCRIPTION:   Get the current list of folders and files in HOME.
#===============================================================================
function get_home_state()
{
    echo "$(find $HOME -mindepth 1 -maxdepth 1)"

}  # ------------  end of function get_home_state  ------------



#===  FUNCTION  ================================================================
#         NAME:   Get home diff
#  DESCRIPTION:   Compare the before and after list and get the dirs and files
#                 created by the app. Also remove $HOME and the dot from path.
#===============================================================================
function get_home_diff()
{
    echo $(diff --changed-group-format='%>' --unchanged-group-format='' <(echo -e "${home_before}") <(echo -e "${home_after}") | sed "s|$HOME/\.||g")

}  # ------------  end of function get_home_diff  ------------



#===============================================================================
# BEGINNING OF SCRIPT WORK
#===============================================================================

echo -e "$BLD$SCRIPT_NAME v$SCRIPT_VERSION"
echo -e "$GREEN================$NS"

#-------------------------------------------------------------------------------
# Make XDG_Wrapper data folder
#-------------------------------------------------------------------------------
if [[ ! -d "$XDG_WRAPPER_FOLDER" ]]; then
    echo -en "${F_SCR}Creating '${ORANGE}${XDG_DATA_HOME}${NS}${ITL}' folder..."
    mkdir "$XDG_WRAPPER_FOLDER"
    echo -e " $F_OK"
fi

#-------------------------------------------------------------------------------
# If program data is not found on the db, generate the file and folders list.
# Else, use the data to move the folders to HOME
#-------------------------------------------------------------------------------

#if [[ ! $(get_dir_and_files_from_db) == 0 ]]; then
get_dir_and_files_from_db

if [[ ${#app_dirs_and_files[@]} -eq 0 ]]; then
    echo -e "${F_SCR}$ORANGE${ITL}No data of '${F_APP}' in the database$NS"
    # Data not found on db, so it is the first program run
    home_before=$(get_home_state)
    run_app
    home_after=$(get_home_state)

    echo -en "${F_SCR}${ITL}Getting folders and files in HOME...$NS"
    app_dirs_and_files=$(get_home_diff)
    echo -e " $F_OK"
    echo -en "${F_SCR}${ITL}Obtained list: $NS"
    echo -e "${ORANGE}${app_dirs_and_files}$NS"

    save_app_info_into_db
else
    mv_dir_and_files_to_home
    run_app
fi

#----------------------------------------
# After program excecution clean the Home
mv_dir_and_files_from_home
echo -e "${F_SCR}${ITL}Closing...$NS"

